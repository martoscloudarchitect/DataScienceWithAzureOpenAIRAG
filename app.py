# import required libraries
import os
from dotenv import load_dotenv, find_dotenv

import streamlit as st
import pandas as pd 
import hashlib

# import langchain required libraries to use with Azure OpenAI
from langchain_openai import AzureChatOpenAI
from langchain_experimental.agents import create_pandas_dataframe_agent

# import Azure API KEYs to be used by llm models
load_dotenv()
azure_openai_model_deployment_name = os.getenv("AZURE_OPENAI_MODEL_DEPLOYMENT_NAME")

if not azure_openai_model_deployment_name:
    st.error("AZURE_OPENAI_MODEL_DEPLOYMENT_NAME environment variable is not set. Please check your .env file.")


# Browser Title
st.set_page_config(page_title="AI Assistant for Data Science", page_icon=":bar_chart:", layout="wide")

# Main Page Title
st.title('ü¶æ Make: Data > Become: Information > To Leverage: As Knowledgeü¶ø')

# Welcoming Message
st.write("Hello, I'm your AI Assistant and I'm here inspire your creativity in your data exploration journey")

# Welcoming Sidebar
with st.sidebar:
    st.write('*Your data Science Adventure begins with a CSV file.*')
    st.caption('''First: You may already know that every exciting data science journey starts with a dataset. That's why I'd love for you to upload a CSV file of your own.''')
    st.caption('''Once we have your data in hand, we will dive into understanding it and have some fun exploring it with help from our machine learning agent using natural language. The limit here is only your creativity and curioristy to learn something from this dataset.''')
    st.caption('''Then, we will finally shape your business challenge into a data science famework. I will introduce you to the collest machine learning models, and we will use them to tackle your problem. Sounds like a fun learning right?''')
    
    st.divider()

    st.caption("Project created by:")
    st.caption("<p style ='text-align:center'>Diego Martos - Sr. Azure Cloud SA @ MSFT</p>", unsafe_allow_html=True)

# Initialise the key in session state
if 'clicked' not in st.session_state:
    st.session_state.clicked ={1:False}

# Function to update the value in session state
def clicked(button):
    st.session_state.clicked[button] = True

st.button("Let's get started, Click Here!", on_click = clicked, args=[1])
if st.session_state.clicked[1]:
    st.header('üïµÔ∏èExploratory Data Analysis Section')
    st.subheader("Let's bring your CSV file here:") 

    # Handling the Input File
    user_csv = st.file_uploader("Upload your CSV file here", type="csv")

    def hash_file(file):
        file.seek(0)
        file_content = file.read()
        return hashlib.md5(file_content).hexdigest()

    # Only converts the CSV file into pandas dataframe if there is a valid file uploaded by the user:
    if user_csv != None:
        file_hash = hash_file(user_csv)
        user_csv.seek(0) # Reset the file pointer to the beginning of the file

        # Check if the file hash is different from the previous one
        if 'file_hash' in st.session_state and st.session_state.file_hash != file_hash:
            st.cache_data.clear()  # Clear the cache if a new file is uploaded

        # Update the session state with the new file hash
        st.session_state.file_hash = file_hash
        
        
        st.cache_data(hash_funcs={pd.DataFrame: lambda _: file_hash})
        def load_data(file):
            return pd.read_csv(file, low_memory=False)
        
        df = load_data(user_csv)

        st.subheader('Initial Insights: Results generated by AI assistant based on CSV file provided:') 
        #st.write(df.head())
        

        # Creates the llm model
        llm = AzureChatOpenAI(
                    deployment_name=azure_openai_model_deployment_name,
                    openai_api_type="azure",
                    temperature = 0
                )
        @st.cache_data
        def steps_eda():
            return llm('What are the steps of Exploratory Data Analytics?')
            #return steps_eda

        with st.sidebar:
            with st.expander('Wonder what are the steps of EDA?'):
                eda_steps = steps_eda()
                st.write(eda_steps)

        # Creates the CSV Agent
        pandas_agent = create_pandas_dataframe_agent(llm, df, verbose = False, allow_dangerous_code=True)
        
        # Functions of the main script:
        @st.cache_data
        def function_agent():
            st.write("**Data Overview**")
            st.write("The first rows of your dataset looks like this:")
            st.write(df.head())
            st.write("**Data Readiness assessment**")
            question1 = "what are the meanings of the columns in the dataset?"
            columns_df = pandas_agent.run(question1)
            st.write(columns_df)
            missing_values = pandas_agent.run("How many missing values can be found in the dataset? describe the columns with missing values and a common reference column to help idenity the missing values, if any.")
            st.write(missing_values)
            duplicates = pandas_agent.run("How many duplicates can be found in the dataset?")
            st.write(duplicates)
            st.write("**Data Summarization**")
            st.write(df.describe())
            correlation_analysis = pandas_agent.run("What is the correlation between the columns in the dataset? Sort the response in tabular format in ascending order from highest to lowest correlation.")
            st.write(correlation_analysis)
            outliers = pandas_agent.run("Are there any outliers in the dataset? If any is found, provide references of the columns with outliers and the values that are considered outliers.")
            st.write(outliers)
            new_features = pandas_agent.run("In case of positive correlation, suggest potential new columns that can be created based on original data? Provide some examples as sample data to illustre in case of positive correlation only, including sample values in tabular format.")
            st.write(new_features)
            #new_usecases = pandas_agent.run("What new insights not found that can be derived from columns with high correclation? And how they would be valuable to for future data collection and analysis?")
            #st.write(new_usecases)
            return

        @st.cache_data
        def  function_question_variable():
            st.line_chart(df, y =[user_question_variable])
            summary_statistics = pandas_agent.run(f"Can you provide a summary statistics of the variable {user_question_variable}?")
            st.write(summary_statistics)
            normality = pandas_agent.run(f"Is the variable {user_question_variable} normally distributed?")
            st.write(normality)
            outliers_variable = pandas_agent.run(f"Are there any outliers in the variable {user_question_variable}? If any is found, provide references of the columns with outliers and the values that are considered outliers.")
            st.write(outliers_variable)
            trends = pandas_agent.run(f"What trends can be observed in the variable {user_question_variable}?")
            st.write(trends)
            missing_values_variable = pandas_agent.run(f"How many missing values can be found in the variable {user_question_variable}?")
            st.write(missing_values_variable)
            return

        @st.cache_data
        def function_question_dataframe():
            dataframe_info = pandas_agent.run(user_question_dataframe)
            st.write(dataframe_info)
            return


        # Main
        st.header('Exploratory data analysis')
        st.subheader('General information about the dataset:')     

        function_agent()

        st.subheader('Variable of Study:')
        user_question_variable = st.text_input("What Variable you want to investigate further in the available dataset?")
        if user_question_variable != None and user_question_variable != "":
            function_question_variable()

            st.subheader('Further Study:')
            if user_question_variable:
                user_question_dataframe = st.text_input("What other question you want to ask about the dataset?")
                #if user_question_variable != None and user_question_variable not in ("", "no", "No"):
                #    function_question_dataframe()
                #if user_question_dataframe == ("", "no", "No"):
                #    st.write("")
                if user_question_variable.lower() not in ("", "no"):
                    function_question_dataframe()
                else:
                    st.write("")

        

